import React, {useState} from 'react';
import UploadPage from "./pages/uploadPage/uploadPage.jsx";
import DocPage2 from "./pages/docPage/docPage2.jsx";

function App() {
    const mockDocText = `
        <div>
            <h1>Техническое задание на разработку системы управления документооборотом</h1>
            
            <h2>1. Общие положения</h2>
            <p>Настоящее техническое задание определяет <span error-id="1">требованиЯ</span> к разработке системы управления документооборотом для предприятия. Система должна <span error-id="2">обеспечивать</span> автоматизацию процессов создания, <span error-id="3">обработки и хранения</span> документов.</p>
            
            <p>Основные цели проекта включают <span error-id="4">повышение эффективности</span> работы с документами, <span error-id="5">сокращение времени</span> на поиск и обработку информации, а также <span error-id="6">обеспечение безопасности</span> конфиденциальных данных.</p>
            
            <h2>2. Функциональные требования</h2>
            <p>Система должна предоставлять следующие возможности:</p>
            <ul>
                <li>Создание и редактирование документов <span error-id="7">различных типов</span></li>
                <li>Организация <span error-id="8">иерархической структуры</span> хранения документов</li>
                <li>Поиск документов по <span error-id="9">различным критериям</span></li>
                <li>Контроль версий и <span error-id="10">отслеживание изменений</span></li>
                <li>Настройка прав доступа для <span error-id="11">разных категорий пользователей</span></li>
            </ul>
            
            <h2>3. Архитектура системы</h2>
            <p>Система должна быть построена на основе <span error-id="12">трехуровневой архитектуры</span>:</p>
            <ol>
                <li>Уровень представления - веб-интерфейс пользователя</li>
                <li>Уровень бизнес-логики - <span error-id="13">сервер приложений</span></li>
                <li>Уровень данных - <span error-id="14">база данных</span></li>
            </ol>
            
            <p>Взаимодействие между уровнями должно <span error-id="15">осуществляться</span> через стандартные протоколы и API. Система должна поддерживать <span error-id="16">масштабируемость</span> и возможность интеграции с внешними системами.</p>
            
            <h2>4. Технические требования</h2>
            <p>Для реализации системы должны использоваться следующие технологии:</p>
            <ul>
                <li>Frontend: React.js, TypeScript</li>
                <li>Backend: Node.js, Express.js</li>
                <li>База данных: PostgreSQL</li>
                <li>Кэширование: Redis</li>
            </ul>
            
            <p>Система должна поддерживать работу в операционных системах Windows, macOS и Linux. Минимальные требования к аппаратному <span error-id="17">обеспечению</span>: процессор с частотой не менее 2.4 ГГц, оперативная память 8 ГБ, свободное место на диске 100 ГБ.</p>
            
            <h2>5. Интерфейс пользователя</h2>
            <p>Интерфейс системы должен быть интуитивно понятным и соответствовать современным стандартам <span error-id="18">юзабилити</span>. Основные элементы интерфейса включают:</p>
            <ul>
                <li>Главное меню с доступом ко всем функциям</li>
                <li>Область просмотра и редактирования документов</li>
                <li>Панель навигации по структуре документов</li>
                <li>Строка поиска с расширенными фильтрами</li>
            </ul>
            
            <h2>6. Безопасность</h2>
            <p>Система должна обеспечивать высокий уровень безопасности данных. Требования к безопасности включают:</p>
            <ol>
                <li>Аутентификация пользователей через <span error-id="19">многофакторную аутентификацию</span></li>
                <li>Шифрование данных при передаче и хранении</li>
                <li>Регулярное резервное копирование</li>
                <li>Мониторинг активности пользователей</li>
                <li>Защита от SQL-инъекций и XSS-атак</li>
            </ol>
            
            <p>Все действия пользователей должны логироваться для последующего аудита. Система должна соответствовать требованиям <span error-id="20">ГОСТ Р ИСО/МЭК 27001</span>.</p>
            
            <h2>7. Производительность</h2>
            <p>Система должна обеспечивать высокую производительность при работе с большим объемом данных. Время отклика на пользовательские запросы не должно превышать 3 секунд для 95% операций.</p>
            
            <p>Система должна поддерживать одновременную работу не менее 1000 пользователей без снижения производительности. Время загрузки веб-интерфейса не должно превышать 5 секунд при скорости интернет-соединения 10 Мбит/с.</p>
            
            <h2>8. Тестирование</h2>
            <p>В процессе разработки должно проводиться комплексное тестирование системы, включающее:</p>
            <ul>
                <li>Модульное тестирование компонентов</li>
                <li>Интеграционное тестирование</li>
                <li>Нагрузочное тестирование</li>
                <li>Тестирование безопасности</li>
                <li>Пользовательское тестирование</li>
            </ul>
            
            <h2>9. Документация</h2>
            <p>К системе должна быть подготовлена следующая документация:</p>
            <ol>
                <li>Руководство администратора</li>
                <li>Руководство пользователя</li>
                <li>Техническая документация разработчика</li>
                <li>API документация</li>
            </ol>
            
            <h2>10. Сроки и этапы реализации</h2>
            <p>Проект должен быть реализован в четыре этапа общей продолжительностью 12 месяцев:</p>
            <ol>
                <li>Этап 1: Анализ требований и проектирование (2 месяца)</li>
                <li>Этап 2: Разработка основного функционала (6 месяцев)</li>
                <li>Этап 3: Тестирование и доработка (3 месяца)</li>
                <li>Этап 4: Внедрение и сопровождение (1 месяц)</li>
            </ol>
            
            <p>По завершении каждого этапа должна проводиться приемка выполненных работ заказчиком.</p>
        </div>
    `;

    const mockErrors = [
        {id: 1, title: "Орфографическая ошибка", description: "Неправильное написание слова 'требования' - должно быть 'требования', а не 'требованиЯ'"},
        {id: 2, title: "Стилистическая ошибка", description: "Рекомендуется использовать более конкретную формулировку вместо 'обеспечивать'"},
        {id: 3, title: "Пунктуационная ошибка", description: "Отсутствует запятая в перечислении 'обработки, и хранения'"},
        {id: 4, title: "Неточная формулировка", description: "Фраза 'повышение эффективности' слишком общая, требует конкретизации"},
        {id: 5, title: "Тавтология", description: "Избыточное использование слова 'время' - 'сокращение времени на время'"},
        {id: 6, title: "Неопределенность", description: "Не указаны конкретные меры 'обеспечения безопасности'"},
        {id: 7, title: "Неконкретность", description: "Не определены 'различные типы' документов"},
        {id: 8, title: "Термин требует пояснения", description: "Термин 'иерархическая структура' нуждается в детализации"},
        {id: 9, title: "Расплывчатая формулировка", description: "Не указаны конкретные 'критерии' поиска"},
        {id: 10, title: "Недостаточная детализация", description: "Функция 'отслеживания изменений' требует более подробного описания"},
        {id: 11, title: "Неопределенность категорий", description: "Не определены 'категории пользователей' и их права"},
        {id: 12, title: "Техническая неточность", description: "Трехуровневая архитектура описана поверхностно"},
        {id: 13, title: "Неконкретность", description: "Не указаны характеристики 'сервера приложений'"},
        {id: 14, title: "Недостаточная спецификация", description: "Требования к 'базе данных' не детализированы"},
        {id: 15, title: "Пассивный залог", description: "Рекомендуется использовать активный залог вместо 'осуществляться'"},
        {id: 16, title: "Неконкретность требования", description: "Понятие 'масштабируемость' требует количественных характеристик"},
        {id: 17, title: "Орфографическая ошибка", description: "Правильно писать 'обеспечению', а не 'обеспечению'"},
        {id: 18, title: "Заимствованный термин", description: "Рекомендуется заменить 'юзабилити' на 'удобство использования'"},
        {id: 19, title: "Техническая неточность", description: "Термин 'многофакторная аутентификация' использован некорректно"},
        {id: 20, title: "Ошибка в наименовании стандарта", description: "Неточное указание стандарта - проверить актуальное наименование ГОСТ"}
    ];

    const [scanComplete, setScanComplete] = useState(false);

    const [docText, setDocText] = useState([]);
    const [invalidErrors, setInvalidErrors] = useState([]);
    const [missingErrors, setMissingErrors] = useState("");
    const [downloadUrl, setDownloadUrl] = useState("");

    return (

        <div className="app-container" data-theme={scanComplete ? 'light' : 'dark'}>
            {!scanComplete ? (
                <UploadPage setScanComplete={setScanComplete} setDocText={setDocText} setInvalidErrors={setInvalidErrors} setMissingErrors={setMissingErrors} setDownloadUrl={setDownloadUrl} />
            ) : (
                <DocPage2 document={docText} invalidErrors={invalidErrors} missingErrors={missingErrors} downloadUrl={downloadUrl}/>
            )}
        </div>
    );
}

export default App;